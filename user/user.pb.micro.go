// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	Greet(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Login(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetUserInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetDeptInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*DeptResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Greet(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.Greet", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Login(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.Login", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetDeptInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*DeptResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetDeptInfo", in)
	out := new(DeptResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Greet(context.Context, *Request, *Response) error
	Login(context.Context, *Request, *Response) error
	GetUserInfo(context.Context, *Request, *Response) error
	GetDeptInfo(context.Context, *Request, *DeptResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Greet(ctx context.Context, in *Request, out *Response) error
		Login(ctx context.Context, in *Request, out *Response) error
		GetUserInfo(ctx context.Context, in *Request, out *Response) error
		GetDeptInfo(ctx context.Context, in *Request, out *DeptResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Greet(ctx context.Context, in *Request, out *Response) error {
	return h.UserServiceHandler.Greet(ctx, in, out)
}

func (h *userServiceHandler) Login(ctx context.Context, in *Request, out *Response) error {
	return h.UserServiceHandler.Login(ctx, in, out)
}

func (h *userServiceHandler) GetUserInfo(ctx context.Context, in *Request, out *Response) error {
	return h.UserServiceHandler.GetUserInfo(ctx, in, out)
}

func (h *userServiceHandler) GetDeptInfo(ctx context.Context, in *Request, out *DeptResponse) error {
	return h.UserServiceHandler.GetDeptInfo(ctx, in, out)
}
