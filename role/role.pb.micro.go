// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: role.proto

package role

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoleService service

func NewRoleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoleService service

type RoleService interface {
	GetSubSysInfo(ctx context.Context, in *SubSysInfoRequest, opts ...client.CallOption) (*SubSysInfoResponse, error)
	FetchRoleList(ctx context.Context, in *RoleListRequest, opts ...client.CallOption) (*RoleListResponse, error)
	FetchUserList(ctx context.Context, in *Request, opts ...client.CallOption) (*UserListResponse, error)
	AddRole(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*Response, error)
	UpdateRole(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*Response, error)
	DeleteRole(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) GetSubSysInfo(ctx context.Context, in *SubSysInfoRequest, opts ...client.CallOption) (*SubSysInfoResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.GetSubSysInfo", in)
	out := new(SubSysInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) FetchRoleList(ctx context.Context, in *RoleListRequest, opts ...client.CallOption) (*RoleListResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.FetchRoleList", in)
	out := new(RoleListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) FetchUserList(ctx context.Context, in *Request, opts ...client.CallOption) (*UserListResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.FetchUserList", in)
	out := new(UserListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) AddRole(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RoleService.AddRole", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) UpdateRole(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RoleService.UpdateRole", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) DeleteRole(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RoleService.DeleteRole", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	GetSubSysInfo(context.Context, *SubSysInfoRequest, *SubSysInfoResponse) error
	FetchRoleList(context.Context, *RoleListRequest, *RoleListResponse) error
	FetchUserList(context.Context, *Request, *UserListResponse) error
	AddRole(context.Context, *NewRoleRequest, *Response) error
	UpdateRole(context.Context, *NewRoleRequest, *Response) error
	DeleteRole(context.Context, *Request, *Response) error
}

func RegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) error {
	type roleService interface {
		GetSubSysInfo(ctx context.Context, in *SubSysInfoRequest, out *SubSysInfoResponse) error
		FetchRoleList(ctx context.Context, in *RoleListRequest, out *RoleListResponse) error
		FetchUserList(ctx context.Context, in *Request, out *UserListResponse) error
		AddRole(ctx context.Context, in *NewRoleRequest, out *Response) error
		UpdateRole(ctx context.Context, in *NewRoleRequest, out *Response) error
		DeleteRole(ctx context.Context, in *Request, out *Response) error
	}
	type RoleService struct {
		roleService
	}
	h := &roleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoleService{h}, opts...))
}

type roleServiceHandler struct {
	RoleServiceHandler
}

func (h *roleServiceHandler) GetSubSysInfo(ctx context.Context, in *SubSysInfoRequest, out *SubSysInfoResponse) error {
	return h.RoleServiceHandler.GetSubSysInfo(ctx, in, out)
}

func (h *roleServiceHandler) FetchRoleList(ctx context.Context, in *RoleListRequest, out *RoleListResponse) error {
	return h.RoleServiceHandler.FetchRoleList(ctx, in, out)
}

func (h *roleServiceHandler) FetchUserList(ctx context.Context, in *Request, out *UserListResponse) error {
	return h.RoleServiceHandler.FetchUserList(ctx, in, out)
}

func (h *roleServiceHandler) AddRole(ctx context.Context, in *NewRoleRequest, out *Response) error {
	return h.RoleServiceHandler.AddRole(ctx, in, out)
}

func (h *roleServiceHandler) UpdateRole(ctx context.Context, in *NewRoleRequest, out *Response) error {
	return h.RoleServiceHandler.UpdateRole(ctx, in, out)
}

func (h *roleServiceHandler) DeleteRole(ctx context.Context, in *Request, out *Response) error {
	return h.RoleServiceHandler.DeleteRole(ctx, in, out)
}
